
    "/v1/assistants": {
      "post": {
        "summary": "Create an assistant",
        "description": "Create an assistant with a model and instructions.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["model"],
                "properties": {
                  "model": {
                    "type": "string",
                    "description": "ID of the model to use. You can use the List models API to see all of your available models, or see our Model overview for descriptions of them."
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "The name of the assistant. The maximum length is 256 characters."
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "The description of the assistant. The maximum length is 512 characters."
                  },
                  "instructions": {
                    "type": "string",
                    "maxLength": 256000,
                    "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters."
                  },
                  "tools": {
                    "type": "array",
                    "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types code_interpreter, file_search, or function.",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "required": ["type"],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["code_interpreter"],
                              "description": "The type of tool being defined: code_interpreter"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": ["type"],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["file_search"],
                              "description": "The type of tool being defined: file_search"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": ["type", "function"],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["function"],
                              "description": "The type of tool being defined: function"
                            },
                            "function": {
                              "type": "object",
                              "description": "The function properties for the tool."
                            }
                          }
                        }
                      ]
                    },
                    "default": [],
                    "maxItems": 128
                  },
                  "tool_resources": {
                    "type": "object",
                    "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the code_interpreter tool requires a list of file IDs, while the file_search tool requires a list of vector store IDs.",
                    "properties": {
                      "code_interpreter": {
                        "type": "object",
                        "properties": {
                          "file_ids": {
                            "type": "array",
                            "description": "A list of file IDs made available to the code_interpreter tool. There can be a maximum of 20 files associated with the tool.",
                            "items": {
                              "type": "string"
                            },
                            "default": [],
                            "maxItems": 20
                          }
                        }
                      },
                      "file_search": {
                        "type": "object",
                        "properties": {
                          "vector_store_ids": {
                            "type": "array",
                            "description": "The vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.",
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 1
                          },
                          "vector_stores": {
                            "type": "array",
                            "description": "A helper to create a vector store with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "file_ids": {
                                  "type": "array",
                                  "description": "A list of file IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "maxItems": 10000
                                },
                                "metadata": {
                                  "type": "object",
                                  "description": "Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.",
                                  "additionalProperties": {
                                    "type": "string",
                                    "maxLength": 512
                                  },
                                  "maxProperties": 16
                                }
                              }
                            },
                            "maxItems": 1
                          }
                        }
                      }
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.",
                    "additionalProperties": {
                      "type": "string",
                      "maxLength": 512
                    },
                    "maxProperties": 16
                  },
                  "temperature": {
                    "type": "number",
                    "description": "What sampling temperature to use, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
                    "default": 1,
                    "minimum": 0,
                    "maximum": 2
                  },
                  "top_p": {
                    "type": "number",
                    "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.",
                    "default": 1
                  },
                  "response_format": {
                    "anyOf": [
                      {
                        "type": "string",
                        "default": "auto"
                      },
                      {
                        "type": "object",
                        "description": "An object describing the expected output of the model. If json_object only function type tools are allowed to be passed to the Run. If text the model can return text or any value needed."
                      }
                    ],
                    "description": "Specifies the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models since gpt-3.5-turbo-1106."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "assistant": {
                      "type": "object",
                      "description": "The created assistant object."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List assistants",
        "description": "Returns a list of assistants.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "An assistant object."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/assistants/{assistant_id}": {
      "get": {
        "summary": "Retrieve an assistant",
        "description": "Retrieves an assistant.",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "description": "The ID of the assistant to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The assistant object matching the specified ID."
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Modify an assistant",
        "description": "Modifies an assistant.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "model": {
                    "type": "string",
                    "description": "ID of the model to use. You can use the List models API to see all of your available models, or see our Model overview for descriptions of them."
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "The name of the assistant. The maximum length is 256 characters."
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "The description of the assistant. The maximum length is 512 characters."
                  },
                  "instructions": {
                    "type": "string",
                    "maxLength": 256000,
                    "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters."
                  },
                  "tools": {
                    "type": "array",
                    "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "required": ["type"],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["code_interpreter"],
                              "description": "The type of tool being defined: code_interpreter"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": ["type"],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["file_search"],
                              "description": "The type of tool being defined: file_search"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": ["type", "function"],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["function"],
                              "description": "The type of tool being defined: function"
                            },
                            "function": {
                              "type": "object",
                              "description": "The function properties for the tool."
                            }
                          }
                        }
                      ]
                    },
                    "default": [],
                    "maxItems": 128
                  },
                  "tool_resources": {
                    "type": "object",
                    "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
                    "properties": {
                      "code_interpreter": {
                        "type": "object",
                        "properties": {
                          "file_ids": {
                            "type": "array",
                            "description": "A list of file IDs made available to the code_interpreter tool. There can be a maximum of 20 files associated with the tool.",
                            "items": {
                              "type": "string"
                            },
                            "default": [],
                            "maxItems": 20
                          }
                        }
                      },
                      "file_search": {
                        "type": "object",
                        "properties": {
                          "vector_store_ids": {
                            "type": "array",
                            "description": "The vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.",
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 1
                          },
                          "vector_stores": {
                            "type": "array",
                            "description": "A helper to create a vector store with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "file_ids": {
                                  "type": "array",
                                  "description": "A list of file IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "maxItems": 10000
                                },
                                "metadata": {
                                  "type": "object",
                                  "description": "Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.",
                                  "additionalProperties": {
                                    "type": "string",
                                    "maxLength": 512
                                  },
                                  "maxProperties": 16
                                }
                              }
                            },
                            "maxItems": 1
                          }
                        }
                      }
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.",
                    "additionalProperties": {
                      "type": "string",
                      "maxLength": 512
                    },
                    "maxProperties": 16
                  },
                  "temperature": {
                    "type": "number",
                    "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
                    "default": 1,
                    "minimum": 0,
                    "maximum": 2
                  },
                  "top_p": {
                    "type": "number",
                    "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.",
                    "default": 1
                  },
                  "response_format": {
                    "anyOf": [
                      {
                        "type": "string",
                        "default": "auto"
                      },
                      {
                        "type": "object",
                        "description": "An object describing the expected output of the model. If json_object only function type tools are allowed to be passed to the Run. If text the model can return text or any value needed."
                      }
                    ],
                    "description": "Specifies the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models since gpt-3.5-turbo-1106."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The modified assistant object."
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an assistant",
        "description": "Delete an assistant.",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "description": "The ID of the assistant to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The deletion status.",
                      "enum": ["success"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads": {
      "post": {
        "summary": "Create a thread",
        "description": "Create a thread.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messages": {
                    "type": "array",
                    "description": "A list of messages to start the thread with.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "assistant_id": {
                          "type": "string",
                          "description": "The ID of the assistant to use to execute this run."
                        },
                        "content": {
                          "type": "string",
                          "description": "The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document."
                        },
                        "role": {
                          "type": "string",
                          "description": "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation."
                        }
                      },
                      "required": [
                        "assistant_id",
                        "content",
                        "role"
                      ]
                    }
                  },
                  "tool_resources": {
                    "type": "object",
                    "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
                    "properties": {
                      "code_interpreter": {
                        "type": "object",
                        "description": "Configuration for the `code_interpreter` tool.",
                        "properties": {
                          "file_ids": {
                            "type": "array",
                            "description": "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.",
                            "items": {
                              "type": "string"
                            },
                            "default": [],
                            "maxItems": 20
                          }
                        }
                      },
                      "file_search": {
                        "type": "object",
                        "description": "Configuration for the `file_search` tool.",
                        "properties": {
                          "vector_store_ids": {
                            "type": "array",
                            "description": "The vector store attached to this thread. There can be a maximum of 1 vector store attached to the thread.",
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 1
                          },
                          "vector_stores": {
                            "type": "array",
                            "description": "A helper to create a vector store with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "file_ids": {
                                  "type": "array",
                                  "description": "A list of file IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "maxItems": 10000
                                },
                                "metadata": {
                                  "type": "object",
                                  "description": "Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.",
                                  "additionalProperties": {
                                    "type": "string",
                                    "maxLength": 512
                                  },
                                  "maxProperties": 16
                                }
                              },
                              "required": [
                                "file_ids"
                              ]
                            },
                            "maxItems": 1
                          }
                        }
                      }
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.",
                    "additionalProperties": {
                      "type": "string",
                      "maxLength": 512
                    },
                    "maxProperties": 16
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "thread": {
                      "type": "object",
                      "description": "The created thread object."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads/{thread_id}": {
      "get": {
        "summary": "Retrieve a thread",
        "description": "Retrieves a thread.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "thread": {
                      "type": "object",
                      "description": "The thread object matching the specified ID."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Modify a thread",
        "description": "Modifies a thread.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread to modify. Only the `metadata` can be modified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tool_resources": {
                    "type": "object",
                    "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
                    "properties": {
                      "code_interpreter": {
                        "type": "object",
                        "description": "Configuration for the `code_interpreter` tool.",
                        "properties": {
                          "file_ids": {
                            "type": "array",
                            "description": "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.",
                            "items": {
                              "type": "string"
                            },
                            "default": [],
                            "maxItems": 20
                          }
                        }
                      },
                      "file_search": {
                        "type": "object",
                        "description": "Configuration for the `file_search` tool.",
                        "properties": {
                          "vector_store_ids": {
                            "type": "array",
                            "description": "The vector store attached to this thread. There can be a maximum of 1 vector store attached to the thread.",
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 1
                          }
                        }
                      }
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.",
                    "additionalProperties": {
                      "type": "string",
                      "maxLength": 512
                    },
                    "maxProperties": 16
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "thread": {
                      "type": "object",
                      "description": "The modified thread object matching the specified ID."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a thread",
        "description": "Delete a thread.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The deletion status.",
                      "enum": ["success"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },